// Mocks generated by Mockito 5.4.4 from annotations
// in ditonton/test/test.locator.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i6;

import 'package:fluorflow/src/navigation/navigation_service.dart' as _i2;
import 'package:fluorflow/src/overlays/overlay.dart' as _i7;
import 'package:fluorflow/src/viewmodels/viewmodel.dart' as _i8;
import 'package:flutter/material.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i2.NavigationService {
  @override
  String get currentRoute => (super.noSuchMethod(
        Invocation.getter(#currentRoute),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#currentRoute),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.getter(#currentRoute),
        ),
      ) as String);

  @override
  void back<T>([T? result]) => super.noSuchMethod(
        Invocation.method(
          #back,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void popUntil(_i4.RoutePredicate? predicate) => super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [predicate],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<T?>? navigateTo<T>(
    String? routeName, {
    dynamic arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [routeName],
          {#arguments: arguments},
        ),
        returnValueForMissingStub: null,
      ) as _i5.Future<T?>?);

  @override
  void replaceWith(
    String? routeName, {
    dynamic arguments,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [routeName],
          {#arguments: arguments},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void rootTo(
    String? routeName, {
    dynamic arguments,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #rootTo,
          [routeName],
          {#arguments: arguments},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<TResult?> showDialog<TResult>({
    required _i4.PageRouteBuilder<dynamic>? dialogBuilder,
    _i6.Color? barrierColor = const _i6.Color(2147483648),
    bool? barrierDismissible = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #dialogBuilder: dialogBuilder,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
          },
        ),
        returnValue: _i5.Future<TResult?>.value(),
        returnValueForMissingStub: _i5.Future<TResult?>.value(),
      ) as _i5.Future<TResult?>);

  @override
  _i5.Future<TResult?> showBottomSheet<TResult,
          TSheet extends _i7.FluorFlowOverlay<dynamic, _i8.ViewModel>>(
    TSheet? sheet, {
    _i6.Color? barrierColor = const _i6.Color(2147483648),
    bool? useRootNavigator = false,
    bool? fullscreen = false,
    bool? draggable = true,
    bool? showDragHandle = false,
    bool? useSafeArea = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showBottomSheet,
          [sheet],
          {
            #barrierColor: barrierColor,
            #useRootNavigator: useRootNavigator,
            #fullscreen: fullscreen,
            #draggable: draggable,
            #showDragHandle: showDragHandle,
            #useSafeArea: useSafeArea,
          },
        ),
        returnValue: _i5.Future<TResult?>.value(),
        returnValueForMissingStub: _i5.Future<TResult?>.value(),
      ) as _i5.Future<TResult?>);

  @override
  void closeOverlay<T>({
    bool? confirmed,
    T? result,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #closeOverlay,
          [],
          {
            #confirmed: confirmed,
            #result: result,
          },
        ),
        returnValueForMissingStub: null,
      );
}
